/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 */

var bodyParser = require('body-parser')
var EventEmitter;
try {
  EventEmitter = require('events').EventEmitter;
} catch (e) {
  console.error('[Mew MCP] [express-patch] Failed to require("events").EventEmitter. Using basic polyfill. Error: ' + (e.message || e));
  // Basic EventEmitter polyfill
  EventEmitter = function() {
    this._events = {};
  };
  EventEmitter.prototype.on = function(event, listener) {
    if (!this._events[event]) {
      this._events[event] = [];
    }
    this._events[event].push(listener);
  };
  EventEmitter.prototype.emit = function(event) {
    var listeners = this._events[event];
    if (listeners) {
      var args = Array.prototype.slice.call(arguments, 1);
      for (var i = 0; i < listeners.length; i++) {
        try {
          listeners[i].apply(this, args);
        } catch (err) {
          // In a real polyfill, you might emit an 'error' event
          console.error('[Mew MCP] [express-patch] Error in polyfilled EventEmitter listener:', err);
        }
      }
      return true;
    }
    return false;
  };
  // Add other methods like once, removeListener, etc. if Express needs them.
  // For now, keeping it minimal.
  EventEmitter.prototype.once = function(event, listener) {
    var self = this;
    function onceListener() {
      self.removeListener(event, onceListener);
      listener.apply(this, arguments);
    }
    onceListener.listener = listener; // for removeListener
    this.on(event, onceListener);
  };
  EventEmitter.prototype.removeListener = function(event, listener) {
    if (this._events[event]) {
      var listeners = this._events[event];
      for (var i = listeners.length - 1; i >= 0; i--) {
        if (listeners[i] === listener || (listeners[i].listener === listener)) {
          listeners.splice(i, 1);
          if (!listeners.length) delete this._events[event];
          break;
        }
      }
    }
  };
   EventEmitter.prototype.removeAllListeners = function(event) {
    if (event) {
      delete this._events[event];
    } else {
      this._events = {};
    }
  };
  EventEmitter.prototype.listeners = function(event) {
    return this._events[event] ? this._events[event].slice() : [];
  };
  EventEmitter.prototype.listenerCount = function(event) {
    return this._events[event] ? this._events[event].length : 0;
  };
}
var mixin = require('merge-descriptors');
var proto = require('./application');
var Route = require('./router/route');
var Router = require('./router');
var req = require('./request');
var res = require('./response');

/**
 * Expose `createApplication()`.
 */

exports = module.exports = createApplication;

/**
 * Create an express application.
 *
 * @return {Function}
 * @api public
 */

function createApplication() {
  var app = function(req, res, next) {
    app.handle(req, res, next);
  };

  mixin(app, EventEmitter.prototype, false);
  mixin(app, proto, false);

  // expose the prototype that will get set on requests
  app.request = Object.create(req, {
    app: { configurable: true, enumerable: true, writable: true, value: app }
  })

  // expose the prototype that will get set on responses
  app.response = Object.create(res, {
    app: { configurable: true, enumerable: true, writable: true, value: app }
  })

  app.init();
  return app;
}

/**
 * Expose the prototypes.
 */

exports.application = proto;
exports.request = req;
exports.response = res;

/**
 * Expose constructors.
 */

exports.Route = Route;
exports.Router = Router;

/**
 * Expose middleware
 */

exports.json = bodyParser.json
exports.query = require('./middleware/query');
exports.raw = bodyParser.raw
exports.static = require('serve-static');
exports.text = bodyParser.text
exports.urlencoded = bodyParser.urlencoded

/**
 * Replace removed middleware with an appropriate error message.
 */

var removedMiddlewares = [
  'bodyParser',
  'compress',
  'cookieSession',
  'session',
  'logger',
  'cookieParser',
  'favicon',
  'responseTime',
  'errorHandler',
  'timeout',
  'methodOverride',
  'vhost',
  'csrf',
  'directory',
  'limit',
  'multipart',
  'staticCache'
]

removedMiddlewares.forEach(function (name) {
  Object.defineProperty(exports, name, {
    get: function () {
      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
    },
    configurable: true
  });
});
