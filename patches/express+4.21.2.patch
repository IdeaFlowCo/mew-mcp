diff --git a/node_modules/express/lib/express.js b/node_modules/express/lib/express.js
index d188a16..6288e3a 100644
--- a/node_modules/express/lib/express.js
+++ b/node_modules/express/lib/express.js
@@ -13,7 +13,74 @@
  */
 
 var bodyParser = require('body-parser')
-var EventEmitter = require('events').EventEmitter;
+var EventEmitter;
+try {
+  EventEmitter = require('events').EventEmitter;
+} catch (e) {
+  console.error('[Mew MCP] [express-patch] Failed to require("events").EventEmitter. Using basic polyfill. Error: ' + (e.message || e));
+  // Basic EventEmitter polyfill
+  EventEmitter = function() {
+    this._events = {};
+  };
+  EventEmitter.prototype.on = function(event, listener) {
+    if (!this._events[event]) {
+      this._events[event] = [];
+    }
+    this._events[event].push(listener);
+  };
+  EventEmitter.prototype.emit = function(event) {
+    var listeners = this._events[event];
+    if (listeners) {
+      var args = Array.prototype.slice.call(arguments, 1);
+      for (var i = 0; i < listeners.length; i++) {
+        try {
+          listeners[i].apply(this, args);
+        } catch (err) {
+          // In a real polyfill, you might emit an 'error' event
+          console.error('[Mew MCP] [express-patch] Error in polyfilled EventEmitter listener:', err);
+        }
+      }
+      return true;
+    }
+    return false;
+  };
+  // Add other methods like once, removeListener, etc. if Express needs them.
+  // For now, keeping it minimal.
+  EventEmitter.prototype.once = function(event, listener) {
+    var self = this;
+    function onceListener() {
+      self.removeListener(event, onceListener);
+      listener.apply(this, arguments);
+    }
+    onceListener.listener = listener; // for removeListener
+    this.on(event, onceListener);
+  };
+  EventEmitter.prototype.removeListener = function(event, listener) {
+    if (this._events[event]) {
+      var listeners = this._events[event];
+      for (var i = listeners.length - 1; i >= 0; i--) {
+        if (listeners[i] === listener || (listeners[i].listener === listener)) {
+          listeners.splice(i, 1);
+          if (!listeners.length) delete this._events[event];
+          break;
+        }
+      }
+    }
+  };
+   EventEmitter.prototype.removeAllListeners = function(event) {
+    if (event) {
+      delete this._events[event];
+    } else {
+      this._events = {};
+    }
+  };
+  EventEmitter.prototype.listeners = function(event) {
+    return this._events[event] ? this._events[event].slice() : [];
+  };
+  EventEmitter.prototype.listenerCount = function(event) {
+    return this._events[event] ? this._events[event].length : 0;
+  };
+}
 var mixin = require('merge-descriptors');
 var proto = require('./application');
 var Route = require('./router/route');
